<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_Permissives" Id="{3468ff58-4b50-4782-bf79-0df0256f5d2f}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'hide_all_locals'}
FUNCTION_BLOCK FB_Permissives
VAR_INPUT
    inPermissives : INT;           // Real-world permissive bits from hardware/sensors
    cfg           : ST_PermIntlk_cfg; // Configuration: name, bit descriptions, and bypass settings
END_VAR
VAR_OUTPUT PERSISTENT
    stsOK       : BOOL;            // Overall computed status (TRUE if all required permissives are OK)
    PermStatus  : INT;             // Bitwise computed permissive status (each bit set to 1 means that bit is OK)
END_VAR
VAR
    i         : INT;
    localStatus : INT;             // Local working variable for status
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Clear local status at start of each cycle
localStatus := 0;

// Loop over bits 0 to 15
FOR i := 0 TO 15 DO
    // Check if bypass is active for this bit (bypass bits are in cfg)
    IF (cfg.BypassPermissives AND SHL(1, i)) <> 0 THEN
        // Bypassed: treat this bit as OK
        localStatus := localStatus OR SHL(1, i);
    ELSE
        // Otherwise, if the real permissive bit is set, mark it as OK
        IF (inPermissives AND SHL(1, i)) <> 0 THEN
            localStatus := localStatus OR SHL(1, i);
        END_IF;
    END_IF;
END_FOR

// Save computed status to output variable
PermStatus := localStatus;

// Overall status: if all 16 bits are OK then stsOK is TRUE.
stsOK := (localStatus = -1);]]></ST>
    </Implementation>
    <LineIds Name="FB_Permissives">
      <LineId Id="502" Count="20" />
      <LineId Id="39" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>