<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_SequenceStep" Id="{6fded6fc-6532-4c55-9f81-b2feef091530}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'hide_all_locals'}
FUNCTION_BLOCK FB_SequenceStep
VAR_INPUT
    inpStep              : DINT;  // Current step number (from sequence controller)
    cfgStep              : DINT;  // This FB's step number (step ID)
    cfgNextStep          : DINT;  // Next step if permissives are OK
    inpStepTimerSeconds  : DINT;  // Step timer value (managed externally)
    inpRetry             : BOOL;  // External retry command (to reset fault)
    inpStepPermissives   : INT;   // Actual permissive bits (from sensors, PLC, etc.)
    cfgStepTimeout       : INT;   // Timeout configuration (in seconds)
	inpFaultStep         : BOOL;  // Fault conditions outside of timeout 
END_VAR

VAR_IN_OUT
    ActiveStep           : ActiveStep; 
    // ActiveStep holds:
    //   Step              : DINT;  (current step number)
    //   StatusStepFaulted : BOOL;  (fault flag)
    //   PermsHMI          : ST_PermIntlk_cfg; (permissive configuration: Name, Desc, BypassPermissives)
END_VAR

VAR_OUTPUT
    outStepActive         : BOOL;  // TRUE when this step is active
    outStepActiveOS       : BOOL;  // One-shot rising pulse when step becomes active
    outFaultedStepActive  : BOOL;  // TRUE when this step is faulted
    outFaultedStepActiveOS: BOOL;  // One-shot rising pulse when a fault occurs
    outActiveStepTimedOut : BOOL;  // TRUE when the step times out
    outNextStep           : DINT;  // The next step number in sequence
END_VAR

VAR
    Step_P_Perm    : FB_Permissives; // Instance for permissives check
    rTrig_Activate : R_TRIG;         // Rising edge detector for step activation
    rTrig_Fault    : R_TRIG;         // Rising edge detector for fault detection
    rTrig_Retry    : R_TRIG;         // Rising edge detector for retry detection
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// 1. Evaluate Permissives using FB_Permissives
Step_P_Perm.inPermissives := inpStepPermissives;
Step_P_Perm.cfg           := ActiveStep.PermsHMI;
Step_P_Perm();  // Execute permissives check

// 2. Update the ActiveStep with the current step
ActiveStep.Step := inpStep;

// 3. Determine if this step is active (active when inpStep equals cfgStep)
outStepActive := (inpStep = cfgStep);

// 4. Generate a one-shot pulse for step activation (rising edge)
rTrig_Activate.CLK := outStepActive;
rTrig_Activate();
outStepActiveOS := rTrig_Activate.Q;


// 5. Timeout Handling: If the externally managed timer exceeds the configured timeout, flag as timed out
IF 
(cfgStepTimeout <> 0 ) AND // cfgStepTimeout = 0 for no timeout fault
(inpStepTimerSeconds > cfgStepTimeout) 
THEN
    outActiveStepTimedOut := TRUE;
ELSE
    outActiveStepTimedOut := FALSE;
END_IF;

// 6. Fault Condition:
// A fault occurs if the step is active, the step has timed out, and the permissives are NOT OK.
IF outStepActive AND outActiveStepTimedOut AND (NOT Step_P_Perm.stsOK) 
OR inpFaultStep
THEN
    ActiveStep.StatusStepFaulted := TRUE;
END_IF;

// 7. Set the fault output based on the ActiveStep fault status
outFaultedStepActive := ActiveStep.StatusStepFaulted;

// 8. Generate a one-shot pulse for fault detection (rising edge)
rTrig_Fault.CLK := outFaultedStepActive;
rTrig_Fault();
outFaultedStepActiveOS := rTrig_Fault.Q;

// 9. Retry Logic: if a retry command is detected (rising edge on inpRetry) while faulted, clear the fault flag
rTrig_Retry.CLK := inpRetry;
rTrig_Retry();
IF rTrig_Retry.Q AND outFaultedStepActive THEN
    ActiveStep.StatusStepFaulted := FALSE;
END_IF;

// 10. Determine the next step:
// - If the step is faulted, set outNextStep to cfgStep + 1 (fault-handling step).
// - Else if the permissives are OK and the step is active, set outNextStep to cfgNextStep.
// - Otherwise, remain on the current step.
IF outFaultedStepActive THEN
    outNextStep := cfgStep + 1;
ELSIF Step_P_Perm.stsOK AND outStepActive THEN
    outNextStep := cfgNextStep;
ELSE
    outNextStep := inpStep;
END_IF;
]]></ST>
    </Implementation>
    <LineIds Name="FB_SequenceStep">
      <LineId Id="612" Count="13" />
      <LineId Id="9" Count="0" />
      <LineId Id="627" Count="3" />
      <LineId Id="672" Count="0" />
      <LineId Id="670" Count="0" />
      <LineId Id="673" Count="0" />
      <LineId Id="631" Count="7" />
      <LineId Id="676" Count="0" />
      <LineId Id="675" Count="0" />
      <LineId Id="639" Count="28" />
      <LineId Id="626" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>