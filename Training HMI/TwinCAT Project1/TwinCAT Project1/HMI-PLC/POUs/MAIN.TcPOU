<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="MAIN" Id="{4f4444b9-0fc9-41d2-8d8b-6376a7d4acc5}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
    // State Machine instance
    fbStateMachine : FB_StateMachine;
    
    // HMI interface for state machine
    stateMachineHMI : SM_HMI;
    
    // Current step for state machine - SHARED between state machine and all step programs
    currentStep : ActiveStep;
    
    // State machine command inputs
    smCommands : ST_SM_Commands;
      
    // Test inputs for permissions
    testAutoIntlk : INT := -1;  // All OK by default (-1 = all bits OK)
    testHomePerm : INT := -1;   // All OK by default
    testStartPerm : INT := -1;  // All OK by default
    testProceedPerm : INT := -1; // All OK by default 

	NextStep: DINT; // Next step to be modified by sequences
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//=============================================================================
// MAIN PROGRAM - State Machine Implementation with Sequence Programs
//=============================================================================

//=============================================================================
// CENTRALIZED INITIAL STEP SETTING
//=============================================================================
// Initialize sequence when first entering any state (CurrentStep.Step = 0)
IF currentStep.Step = 0 THEN
    IF fbStateMachine.Status.Homing THEN
        NextStep := 1000;  // Start homing sequence
        // Force immediate timer reset on state entry
        smCommands.CompleteState := FALSE;
    ELSIF fbStateMachine.Status.Running THEN
        NextStep := 3000;  // Start running sequence
        smCommands.CompleteState := FALSE;
    ELSIF fbStateMachine.Status.Stopping THEN
        NextStep := 2000;  // Start stopping sequence
        smCommands.CompleteState := FALSE;
    ELSIF fbStateMachine.Status.Aborting THEN
        NextStep := 5000;  // Start aborting sequence
        smCommands.CompleteState := FALSE;
    ELSIF fbStateMachine.Status.Pausing THEN
        NextStep := 4000;  // Start pausing sequence
        smCommands.CompleteState := FALSE;
    ELSIF fbStateMachine.Status.Proceeding THEN
        NextStep := 6000;  // Start proceeding sequence
        smCommands.CompleteState := FALSE;
    ELSE
        // No initial step needed
    END_IF;
END_IF;

// Call state machine BEFORE sequences to ensure timer is updated first
fbStateMachine(
    EnableIn := TRUE,              // Enable the state machine
    cfgAutoRun := TRUE,           // Auto run configuration  
    inpAutoIntlk := testAutoIntlk, // Auto interlocks
    inpHomePerm := testHomePerm,   // Home permissions
    inpStartPerm := testStartPerm, // Start permissions
    inpProceedPerm := testProceedPerm, // Proceed permissions
    NextStep := NextStep,  // Next step from active sequence program
    Commands := smCommands,        // Command inputs
    HMI := stateMachineHMI,        // HMI interface
    CurrentStep := currentStep     // Current step (shared with sequences)
);


//=============================================================================
// ALWAYS CALL ALL SEQUENCE PROGRAMS - AFTER STATE MACHINE
//=============================================================================
// This ensures the timer has been properly updated before sequences evaluate
// Call all sequence programs - FB_SequenceStep logic handles which steps are active
// This ensures all tags update in real-time for better HMI visibility
_1000_PRG_Homing(
    CurrentStep := currentStep,
    StepTimerSeconds := REAL_TO_DINT(fbStateMachine.StepInfo.StepTimerSeconds),
    RetrySignal := fbStateMachine.outRetry,
    StateMachineStatus := fbStateMachine.Status,
    NextStep := NextStep
);

_3000_PRG_Running(
    CurrentStep := currentStep,
    StepTimerSeconds := REAL_TO_DINT(fbStateMachine.StepInfo.StepTimerSeconds),
    RetrySignal := fbStateMachine.outRetry,
    StateMachineStatus := fbStateMachine.Status,
    NextStep := NextStep
);

_2000_PRG_Stopping(
    CurrentStep := currentStep,
    StepTimerSeconds := REAL_TO_DINT(fbStateMachine.StepInfo.StepTimerSeconds),
    RetrySignal := fbStateMachine.outRetry,
    StateMachineStatus := fbStateMachine.Status,
    NextStep := NextStep
);

_5000_PRG_Aborting(
    CurrentStep := currentStep,
    StepTimerSeconds := REAL_TO_DINT(fbStateMachine.StepInfo.StepTimerSeconds),
    RetrySignal := fbStateMachine.outRetry,
    StateMachineStatus := fbStateMachine.Status,
    NextStep := NextStep
);

_4000_PRG_Pausing(
    CurrentStep := currentStep,
    StepTimerSeconds := REAL_TO_DINT(fbStateMachine.StepInfo.StepTimerSeconds),
    RetrySignal := fbStateMachine.outRetry,
    StateMachineStatus := fbStateMachine.Status,
    NextStep := NextStep
);

_6000_PRG_Proceeding(
    CurrentStep := currentStep,
    StepTimerSeconds := REAL_TO_DINT(fbStateMachine.StepInfo.StepTimerSeconds),
    RetrySignal := fbStateMachine.outRetry,
    StateMachineStatus := fbStateMachine.Status,
    NextStep := NextStep
);

]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="1036" Count="2" />
      <LineId Id="1155" Count="12" />
      <LineId Id="1172" Count="1" />
      <LineId Id="1168" Count="0" />
      <LineId Id="1171" Count="0" />
      <LineId Id="1057" Count="0" />
      <LineId Id="1201" Count="14" />
      <LineId Id="1200" Count="0" />
      <LineId Id="1059" Count="8" />
      <LineId Id="1069" Count="1" />
      <LineId Id="1199" Count="0" />
      <LineId Id="1072" Count="5" />
      <LineId Id="1079" Count="0" />
      <LineId Id="1198" Count="0" />
      <LineId Id="1081" Count="1" />
      <LineId Id="1085" Count="1" />
      <LineId Id="1112" Count="0" />
      <LineId Id="1087" Count="1" />
      <LineId Id="1197" Count="0" />
      <LineId Id="1089" Count="1" />
      <LineId Id="1114" Count="0" />
      <LineId Id="1091" Count="1" />
      <LineId Id="1115" Count="0" />
      <LineId Id="1093" Count="0" />
      <LineId Id="1196" Count="0" />
      <LineId Id="1095" Count="0" />
      <LineId Id="1147" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="1179" Count="5" />
      <LineId Id="1187" Count="2" />
      <LineId Id="1191" Count="0" />
      <LineId Id="1190" Count="0" />
      <LineId Id="1186" Count="0" />
      <LineId Id="1193" Count="0" />
      <LineId Id="1195" Count="0" />
      <LineId Id="1185" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="96" Count="3" />
      <LineId Id="1216" Count="0" />
    </LineIds>
    </POU>
</TcPlcObject>
