<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="MAIN" Id="{4f4444b9-0fc9-41d2-8d8b-6376a7d4acc5}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
    // State Machine instance
    fbStateMachine : FB_StateMachine;
    
    // HMI interface for state machine
    stateMachineHMI : SM_HMI;
    
    // Current step for state machine - SHARED between state machine and all step programs
    currentStep : ActiveStep;
    
    // State machine command inputs
    smCommands : ST_SM_Commands;
      
    // Test inputs for permissions
    testAutoIntlk : INT := -1;  // All OK by default (-1 = all bits OK)
    testHomePerm : INT := -1;   // All OK by default
    testStartPerm : INT := -1;  // All OK by default
    testProceedPerm : INT := -1; // All OK by default
    
    // Next step calculation - determined by active sequence programs
    nextStepFromSequence : DINT;
    
    // Individual next step outputs from each sequence program
    nextStepHoming : DINT;
    nextStepRunning : DINT;
    nextStepStopping : DINT;
    nextStepAborting : DINT;

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//=============================================================================
// MAIN PROGRAM - State Machine Implementation with Sequence Programs
//=============================================================================

//=============================================================================
// CENTRALIZED INITIAL STEP SETTING
//=============================================================================
// Initialize sequence when first entering any state (CurrentStep.Step = 0)
IF currentStep.Step = 0 THEN
    IF fbStateMachine.Status.Homing THEN
        nextStepFromSequence := 1000;  // Start homing sequence
    ELSIF fbStateMachine.Status.Running THEN
        nextStepFromSequence := 3000;  // Start running sequence
    ELSIF fbStateMachine.Status.Stopping THEN
        nextStepFromSequence := 2000;  // Start stopping sequence
    ELSIF fbStateMachine.Status.Aborting THEN
        nextStepFromSequence := 5000;  // Start aborting sequence
    ELSE
        nextStepFromSequence := 0;  // No initial step needed
    END_IF;
END_IF;

//=============================================================================
// ALWAYS CALL ALL SEQUENCE PROGRAMS
//=============================================================================
// Call all sequence programs - FB_SequenceStep logic handles which steps are active
// This ensures all tags update in real-time for better HMI visibility
_1000_PRG_Homing(
    CurrentStep := currentStep,
    StepTimerSeconds := REAL_TO_DINT(fbStateMachine.StepInfo.StepTimerSeconds),
    RetrySignal := fbStateMachine.outRetry,
    StateMachineStatus := fbStateMachine.Status,
    NextStep => nextStepHoming
);

_3000_PRG_Running(
    CurrentStep := currentStep,
    StepTimerSeconds := REAL_TO_DINT(fbStateMachine.StepInfo.StepTimerSeconds),
    RetrySignal := fbStateMachine.outRetry,
    StateMachineStatus := fbStateMachine.Status,
    NextStep => nextStepRunning
);

_2000_PRG_Stopping(
    CurrentStep := currentStep,
    StepTimerSeconds := REAL_TO_DINT(fbStateMachine.StepInfo.StepTimerSeconds),
    RetrySignal := fbStateMachine.outRetry,
    StateMachineStatus := fbStateMachine.Status,
    NextStep => nextStepStopping
);

_5000_PRG_Aborting(
    CurrentStep := currentStep,
    StepTimerSeconds := REAL_TO_DINT(fbStateMachine.StepInfo.StepTimerSeconds),
    RetrySignal := fbStateMachine.outRetry,
    StateMachineStatus := fbStateMachine.Status,
    NextStep => nextStepAborting
);

//=============================================================================
// DETERMINE NEXT STEP FROM ACTIVE SEQUENCE
//=============================================================================
// Use the initial step setting if we just set it, otherwise use sequence output
IF currentStep.Step = 0 AND nextStepFromSequence <> 0 THEN
    // Keep the initial step we just set above
    // nextStepFromSequence already set correctly
ELSE
    // Determine which sequence provided a valid next step (non-zero)
    IF nextStepHoming <> 0 THEN
        nextStepFromSequence := nextStepHoming;
    ELSIF nextStepRunning <> 0 THEN
        nextStepFromSequence := nextStepRunning;
    ELSIF nextStepStopping <> 0 THEN
        nextStepFromSequence := nextStepStopping;
    ELSIF nextStepAborting <> 0 THEN
        nextStepFromSequence := nextStepAborting;
    ELSE
        nextStepFromSequence := currentStep.Step;  // No change
    END_IF;
END_IF;

//=============================================================================
// CENTRALIZED SEQUENCE COMPLETION LOGIC
//=============================================================================
// Handle step 999 completion signal - centralized for all sequences
IF nextStepFromSequence = 999 THEN
    smCommands.CompleteState := TRUE;
    nextStepFromSequence := 0;  // Reset to no step
END_IF;

// Call state machine with step input from active sequence
fbStateMachine(
    EnableIn := TRUE,              // Enable the state machine
    cfgAutoRun := FALSE,           // Auto run configuration  
    inpAutoIntlk := testAutoIntlk, // Auto interlocks
    inpHomePerm := testHomePerm,   // Home permissions
    inpStartPerm := testStartPerm, // Start permissions
    inpProceedPerm := testProceedPerm, // Proceed permissions
    NextStep := nextStepFromSequence,  // Next step from active sequence program
    Commands := smCommands,        // Command inputs
    HMI := stateMachineHMI,        // HMI interface
    CurrentStep := currentStep     // Current step (shared with sequences)
);



]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="1036" Count="11" />
      <LineId Id="1049" Count="8" />
      <LineId Id="1059" Count="8" />
      <LineId Id="1069" Count="8" />
      <LineId Id="1079" Count="3" />
      <LineId Id="1085" Count="1" />
      <LineId Id="1112" Count="0" />
      <LineId Id="1087" Count="1" />
      <LineId Id="1113" Count="0" />
      <LineId Id="1089" Count="1" />
      <LineId Id="1114" Count="0" />
      <LineId Id="1091" Count="1" />
      <LineId Id="1115" Count="0" />
      <LineId Id="1093" Count="7" />
    </LineIds>
  </POU>
</TcPlcObject>