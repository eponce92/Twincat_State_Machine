<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="_3000_PRG_Running" Id="{12345678-1234-1234-1234-123456789002}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM _3000_PRG_Running
VAR_IN_OUT
    CurrentStep : ActiveStep;  // Shared step structure with state machine
	NextStep: DINT; // Next step to be modified by sequences
END_VAR
VAR_INPUT
    StepTimerSeconds : DINT;   // Timer value from state machine
    RetrySignal : BOOL;        // Retry signal from state machine
    StateMachineStatus : ST_SM_Status;  // Complete state machine status
END_VAR

VAR
    // Step function blocks for running sequence
    fbStep3000 : FB_SequenceStep;  // Production Start
    fbStep3002 : FB_SequenceStep;  // Production Execute
    
    // Step permissives (simulation for testing)
    step3000Perms : INT := -1;     // All OK for step 3000
    step3002Perms : INT := -1;     // All OK for step 3002
    
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//=============================================================================
// PRG_Running - Handles RUNNING state sequence (3000-3999)
//=============================================================================
// Step numbering: 3000, 3002 (even numbers)
// Fault steps: 3001, 3003 (odd numbers, +1 of original)
// NOTE: Initial step setting (CurrentStep.Step = 0) is handled in MAIN program


//=============================================================================
// STEP 3000 - PRODUCTION START
//=============================================================================
fbStep3000(
    inpStep := CurrentStep.Step,
    cfgStep := 3000,
    cfgNextStep := 3002,
    inpStepTimerSeconds := StepTimerSeconds,
    inpRetry := RetrySignal,
    inpStepPermissives := step3000Perms,
    cfgStepTimeout := 12,  // 12 second timeout
    inpFaultStep := FALSE,
    ActiveStep := CurrentStep
);

// Step 3000 Active Logic
IF fbStep3000.outStepActive THEN
    // Only simulate permissives if step is active but not advancing
    IF fbStep3000.outNextStep = fbStep3000.cfgStep THEN  // Step is waiting for permissives
        // Permissives simulation - Simulate based on timer
        IF StepTimerSeconds < 5 THEN
            step3000Perms := 16#FFFE;  // Bit 0 not OK (not ready yet)
        ELSE
            step3000Perms := -1;  // All permissives OK after 5 seconds
        END_IF;
    END_IF;
    
    // HMI configuration and actions
    CurrentStep.PermsHMI.Name := 'Production Start';
    CurrentStep.PermsHMI.Desc[0] := 'Raw Material Available';
    CurrentStep.PermsHMI.Desc[1] := 'Process Temperature OK';
    CurrentStep.PermsHMI.Desc[2] := 'Quality System Ready';
    
    // Add any step-specific actions here
    // Example: Start production line, initialize process parameters, etc.
    
    // FB_SequenceStep determines next step automatically based on permissives
    NextStep := fbStep3000.outNextStep;
ELSE
    // Reset permissives when step is not active (ensures fresh start next time)
    step3000Perms := 16#FFFE;  // Reset to NOT OK when leaving step
END_IF;

//=============================================================================
// STEP 3002 - PRODUCTION EXECUTE
//=============================================================================
fbStep3002(
    inpStep := CurrentStep.Step,
    cfgStep := 3002,
    cfgNextStep := 999,  // 0 = sequence complete
    inpStepTimerSeconds := StepTimerSeconds,
    inpRetry := RetrySignal,
    inpStepPermissives := step3002Perms,
    cfgStepTimeout := 20,  // 20 second timeout
    inpFaultStep := FALSE,
    ActiveStep := CurrentStep
);

// Step 3002 Active Logic
IF fbStep3002.outStepActive THEN
    // Only simulate permissives if step is active but not advancing
    IF fbStep3002.outNextStep = fbStep3002.cfgStep THEN  // Step is waiting for permissives
        // Permissives simulation - Simulate based on timer
        IF StepTimerSeconds < 15 THEN
            step3002Perms := 16#FFFD;  // Bit 1 not OK (production not complete)
        ELSE
            step3002Perms := -1;  // All permissives OK after 15 seconds
        END_IF;
    END_IF;
    
    // HMI configuration and actions
    CurrentStep.PermsHMI.Name := 'Production Execute';
    CurrentStep.PermsHMI.Desc[0] := 'Production Line Running';
    CurrentStep.PermsHMI.Desc[1] := 'Quality Checks Passing';
    CurrentStep.PermsHMI.Desc[2] := 'Output Quality OK';
    
    // Add any step-specific actions here
    // Example: Monitor production process, quality checks, output control, etc.
    
    // FB_SequenceStep determines next step automatically based on permissives
    NextStep := fbStep3002.outNextStep;
ELSE
    // Reset permissives when step is not active (ensures fresh start next time)
    step3002Perms := 16#FFFD;  // Reset to NOT OK when leaving step
END_IF;
]]></ST>
    </Implementation>
    <LineIds Name="_3000_PRG_Running">
      <LineId Id="1" Count="6" />
      <LineId Id="19" Count="72" />
      <LineId Id="94" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>