<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="_5000_PRG_Aborting" Id="{12345678-1234-1234-1234-123456789004}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM _5000_PRG_Aborting
VAR_IN_OUT
    CurrentStep : ActiveStep;  // Shared step structure with state machine
	NextStep: DINT; // Next step to be modified by sequences
END_VAR

VAR_INPUT
    StepTimerSeconds : DINT;   // Timer value from state machine
    RetrySignal : BOOL;        // Retry signal from state machine
    StateMachineStatus : ST_SM_Status;  // Complete state machine status
END_VAR

VAR
    // Step function blocks for aborting sequence
    fbStep5000 : FB_SequenceStep;  // Abort Prepare
    fbStep5002 : FB_SequenceStep;  // Abort Execute
    
    // Step permissives (simulation for testing)
    step5000Perms : INT := -1;     // All OK for step 5000
    step5002Perms : INT := -1;     // All OK for step 5002
    
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//=============================================================================
// PRG_Aborting - Handles ABORTING state sequence (5000-5999)
//=============================================================================
// Step numbering: 5000, 5002 (even numbers)
// Fault steps: 5001, 5003 (odd numbers, +1 of original)
// NOTE: Initial step setting (CurrentStep.Step = 0) is handled in MAIN program



//=============================================================================
// STEP 5000 - ABORT PREPARE
//=============================================================================
fbStep5000(
    inpStep := CurrentStep.Step,
    cfgStep := 5000,
    cfgNextStep := 5002,
    inpStepTimerSeconds := StepTimerSeconds,
    inpRetry := RetrySignal,
    inpStepPermissives := step5000Perms,
    cfgStepTimeout := 5,  // 5 second timeout (quick abort)
    inpFaultStep := FALSE,
    ActiveStep := CurrentStep
);

// Step 5000 Active Logic
IF fbStep5000.outStepActive THEN
    // Only simulate permissives if step is active but not advancing
    IF fbStep5000.outNextStep = fbStep5000.cfgStep THEN  // Step is waiting for permissives
        // Permissives simulation - Simulate based on timer
        IF StepTimerSeconds < 2 THEN
            step5000Perms := 16#FFFE;  // Bit 0 not OK (not ready yet)
        ELSE
            step5000Perms := -1;  // All permissives OK after 2 seconds
        END_IF;
    END_IF;
    
    // HMI configuration and actions
    CurrentStep.PermsHMI.Name := 'Abort Prepare';
    CurrentStep.PermsHMI.Desc[0] := 'Emergency Stop Clear';
    CurrentStep.PermsHMI.Desc[1] := 'Safety Systems Active';
    CurrentStep.PermsHMI.Desc[2] := 'Personnel Clear';
    
    // Add any step-specific actions here
    // Example: Set emergency stop relays, activate warning lights, etc.
    
    // FB_SequenceStep determines next step automatically based on permissives
    NextStep := fbStep5000.outNextStep;
ELSE
    // Reset permissives when step is not active (ensures fresh start next time)
    step5000Perms := 16#FFFE;  // Reset to NOT OK when leaving step
END_IF;

//=============================================================================
// STEP 5002 - ABORT EXECUTE  
//=============================================================================
fbStep5002(
    inpStep := CurrentStep.Step,
    cfgStep := 5002,
    cfgNextStep := 0,  // sequence complete
    inpStepTimerSeconds := StepTimerSeconds,
    inpRetry := RetrySignal,
    inpStepPermissives := step5002Perms,
    cfgStepTimeout := 10,  // 10 second timeout
    inpFaultStep := FALSE,
    ActiveStep := CurrentStep
);

// Step 5002 Active Logic
IF fbStep5002.outStepActive THEN
    // Only simulate permissives if step is active but not advancing
    IF fbStep5002.outNextStep = fbStep5002.cfgStep THEN  // Step is waiting for permissives
        // Permissives simulation - Simulate based on timer
        IF StepTimerSeconds < 6 THEN
            step5002Perms := 16#FFFD;  // Bit 1 not OK (abort not complete)
        ELSE
            step5002Perms := -1;  // All permissives OK after 6 seconds
        END_IF;
    END_IF;
    
    // HMI configuration and actions
    CurrentStep.PermsHMI.Name := 'Abort Execute';
    CurrentStep.PermsHMI.Desc[0] := 'Emergency Shutdown Active';
    CurrentStep.PermsHMI.Desc[1] := 'Systems Securing';
    CurrentStep.PermsHMI.Desc[2] := 'Safe State Reached';
    
    // Add any step-specific actions here
    // Example: Execute shutdown sequence, secure valves, stop motors, etc.
    
    // FB_SequenceStep determines next step automatically based on permissives
     NextStep := fbStep5002.outNextStep;
ELSE
    // Reset permissives when step is not active (ensures fresh start next time)
    step5002Perms := 16#FFFD;  // Reset to NOT OK when leaving step
END_IF;

]]></ST>
    </Implementation>
    <LineIds Name="_5000_PRG_Aborting">
      <LineId Id="1" Count="6" />
      <LineId Id="18" Count="53" />
      <LineId Id="74" Count="20" />
      <LineId Id="133" Count="0" />
      <LineId Id="132" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>